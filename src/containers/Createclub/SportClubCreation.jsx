import { useRef, useEffect, useState, useCallback } from "react";
import { CloseCircleOutlined } from "@ant-design/icons";
import styles from "./SportClubCreation.module.css";
import { useNavigate, useLocation } from 'react-router-dom';
import HeaderLogin from "../../components/Header/Hearder";
import HeroSection from "../Club/HeroSection";
import ReactQuill from "react-quill";
import "react-quill/dist/quill.snow.css"; // CSS m·∫∑c ƒë·ªãnh c·ªßa Quill
import { createClub, getAllClubNames, setPayment, deleteClub, createPaymentClub, PaymentforClub } from "../../utils/club"
import { toast } from 'react-toastify';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
const skillLevels = [
  { label: "M·ªõi bi·∫øt ch∆°i", value: 1 },
  { label: "Trung b√¨nh - Kh√°", value: 2 },
  { label: "Chuy√™n nghi·ªáp", value: 3 },
];

function SportClubCreation() {
  const navigate = useNavigate();
  const location = useLocation();
  const userId = localStorage.getItem('userId');
  const [selectedFile, setSelectedFile] = useState(null);
  const [errors, setErrors] = useState({});
  const [existingClubNames, setExistingClubNames] = useState([]);
  const [toastShown, setToastShown] = useState(false);
  const [params, setParams] = useState(new URLSearchParams(location.search));
  const sports = [
    { emoji: "‚öΩ", name: "B√≥ng ƒë√°", value: 1 },
    { emoji: "üèê", name: "B√≥ng chuy·ªÅn", value: 2 },
    { emoji: "üèÄ", name: "B√≥ng r·ªï", value: 3 },
    { emoji: "üè∏", name: "C·∫ßu l√¥ng", value: 4 },
  ];
  const [sendformData, setFormData] = useState({
    userId: userId,
    clubName: "",
    skillLevel: "",
    sport: "",
    description: "",
  });

  const fileInputRef = useRef(null);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Ki·ªÉm tra xem t√™n c√¢u l·∫°c b·ªô c√≥ tr√πng kh√¥ng
    if (name === 'clubName') {
      checkClubNameExist(value);
    }
  };

  const checkClubNameExist = async (clubName) => {
    try {
      const response = await getAllClubNames(); // G·ªçi API ƒë·ªÉ l·∫•y t·∫•t c·∫£ t√™n c√¢u l·∫°c b·ªô
      // const existingNames = response.data.$values.map(name => name.toLowerCase());
      const normalizedNames = response.data.$values.map(name => name.toLowerCase()); // Chuy·ªÉn t·∫•t c·∫£ t√™n th√†nh ch·ªØ th∆∞·ªùng
      console.log('Danh s√°ch t√™n gi·∫£i ƒë·∫•u ƒë√£ chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng:', normalizedNames); // Ki·ªÉm tra danh s√°ch ƒë√£ chuy·ªÉn
      setExistingClubNames(normalizedNames); // L∆∞u v√†o state
      if (normalizedNames.includes(clubName.toLowerCase())) {
        setErrors((prevErrors) => ({
          ...prevErrors,
          clubName: 'T√™n c√¢u l·∫°c b·ªô ƒë√£ t·ªìn t·∫°i.'
        }));
      } else {
        setErrors((prevErrors) => ({
          ...prevErrors,
          clubName: ''
        }));
      }
    } catch (error) {
      console.error('Error fetching club names:', error);
    }
  };
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData((prev) => ({ ...prev, clubImage: URL.createObjectURL(file) }));
      setSelectedFile(file);
    }
  };

  const handleImageRemove = () => {
    setFormData((prev) => ({ ...prev, clubImage: null }));
    if (fileInputRef.current) {
      fileInputRef.current.value = null;
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!sendformData.clubName.trim()) newErrors.clubName = "T√™n c√¢u l·∫°c b·ªô l√† b·∫Øt bu·ªôc.";
    if (!sendformData.clubImage) newErrors.clubImage = "H√¨nh ·∫£nh c√¢u l·∫°c b·ªô l√† b·∫Øt bu·ªôc.";
    if (!sendformData.skillLevel) newErrors.skillLevel = "Tr√¨nh ƒë·ªô th·ªÉ thao l√† b·∫Øt bu·ªôc.";
    if (!sendformData.sport) newErrors.sport = "M√¥n th·ªÉ thao l√† b·∫Øt bu·ªôc.";
    if (!sendformData.description.trim()) newErrors.description = "Quy ƒë·ªãnh c√¢u l·∫°c b·ªô l√† b·∫Øt bu·ªôc.";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0; // Tr·∫£ v·ªÅ true n·∫øu kh√¥ng c√≥ l·ªói
  };
  const callNetPayment = useCallback(async () => {
    try {
      // ƒê·∫£m b·∫£o kh√¥ng g·ªçi l·∫°i h√†m n·∫øu ƒë√£ x·ª≠ l√Ω
      if (!toastShown && params.toString()) {
        const responsePayment = await setPayment(params);
        console.log(responsePayment);
        if (responsePayment.message === "Success" && responsePayment.rspCode) {
          await PaymentforClub();
          toast.success("T·∫°o c√¢u l·∫°c b·ªô th√†nh c√¥ng.", {
            autoClose: 1000,
          });
          setToastShown(true); // ƒê·∫∑t tr·∫°ng th√°i ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã l·∫°i toast
          setTimeout(() => navigate('/myclub'), 1900);
        } else {
          await deleteClub(responsePayment.clubId);
          toast.error("B·∫°n kh√¥ng thanh to√°n n√™n kh√¥ng th·ªÉ t·∫°o gi·∫£i ƒë·∫•u.", {
            autoClose: 1000,
          });
          setTimeout(() => navigate('/createClub'), 1900);
        }
      }
    } catch (err) {
      console.error('Error in callNetPayment:', err);
    }
  }, [params, toastShown, navigate]);
  useEffect(() => {
    if (!toastShown) {
      callNetPayment();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [params]); // Ch·ªâ ph·ª• thu·ªôc v√†o params ƒë·ªÉ tr√°nh g·ªçi l·∫°i kh√¥ng c·∫ßn thi·∫øt
  const handleSubmit = async (e) => {
    e.preventDefault();
    const isNameExist = existingClubNames.includes(sendformData.clubName.toLowerCase());

    if (isNameExist) {
      toast.error('T√™n c√¢u l·∫°c b·ªô ƒë√£ t·ªìn t·∫°i!');
      return;
    }
    if (!validateForm()) return;

    try {
      const responseClub = await createClub({
        sendformData,
        file: selectedFile
      });
      console.log("tournamentId", responseClub.data.clubId);
      if (responseClub.data.clubId) {
        const createdClubId = responseClub.data.clubId;
        const Amount = 200000;
        const response = await createPaymentClub(createdClubId, Amount);

        if (response.data) {
          // Redirect to VNPay payment page
          window.location.href = response.data;

          // L·∫Øng nghe s·ª± ki·ªán beforeunload khi ng∆∞·ªùi d√πng tho√°t kh·ªèi trang
          window.addEventListener('beforeunload', async () => {
            // N·∫øu ng∆∞·ªùi d√πng ch∆∞a thanh to√°n v√† ƒëang tho√°t trang
            await deleteClub(createdClubId);
          });
        } else {
          toast.error(response.data.message || 'C√≥ l·ªói x·∫£y ra');
          // If payment link is not available, delete tournament
          await deleteClub(createdClubId);
        }
      } else {
        toast.error(responseClub.data.message || 'C√≥ l·ªói x·∫£y ra');
      }
    } catch (error) {
      console.error("Error:", error);
      toast.error("ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  };


  return (
    <div className={styles.sportClubCreation}>
      <HeaderLogin />
      <main className={styles.mainContent}>
        <section className={styles.clubCreationSection}>
          <HeroSection />
          <form className={styles.clubForm} onSubmit={handleSubmit}>
            {/* Club Name */}
            <div className={styles.formGroup}>
              <label htmlFor="clubName" className={styles.formLabel} style={{ fontWeight: 600 }}>
                T√™n c√¢u l·∫°c b·ªô
              </label>
              <input
                type="text"
                id="clubName"
                name="clubName"
                className={styles.formInput}
                value={sendformData.clubName}
                onChange={handleInputChange}
              />
              {errors.clubName && <p className={styles.errorText} style={{ color: 'red' }}>{errors.clubName}</p>}
            </div>

            {/* Club Image */}
            <div className={styles.formGroup}>
              <label htmlFor="clubImage" className={styles.formLabel} style={{ fontWeight: 600 }}>
                T·∫£i ·∫£nh c√¢u l·∫°c b·ªô
              </label>
              <input
                type="file"
                id="clubImage"
                name="clubImage"
                className={styles.formInput}
                accept="image/*"
                onChange={handleImageChange}
                ref={fileInputRef}
              />
              {errors.clubImage && <p className={styles.errorText} style={{ color: 'red' }}>{errors.clubImage}</p>}
            </div>
            {sendformData.clubImage && (
              <div className={styles.imagePreview}>
                <div className={styles.imageWrapper}>
                  <img
                    src={sendformData.clubImage}
                    alt="Preview"
                    className={styles.previewImage}
                  />
                  <CloseCircleOutlined
                    className={styles.removeIcon}
                    onClick={handleImageRemove}
                  />
                </div>
              </div>
            )}
            {/* Sport Selection */}
            <div className={styles.formGroup}>
              <h2 className={styles.sectionTitle} style={{ fontWeight: 600 }}>Ch·ªçn m√¥n th·ªÉ thao</h2>
              <div className={styles.sportGrid}>
                {sports.map((sport) => (
                  <button
                    type="button"
                    key={sport.value}
                    className={`${styles.sportButton} ${sendformData.sport === sport.value ? styles.selected : ""
                      }`}
                    onClick={() =>
                      setFormData((prev) => ({ ...prev, sport: sport.value }))
                    }
                  >
                    <span className={styles.sportEmoji}>{sport.emoji}</span>
                    <span className={styles.sportName}>{sport.name}</span>
                  </button>
                ))}
              </div>
            </div>

            {/* Skill Level */}
            <div className={styles.formGroup}>
              <label className={styles.formLabel} style={{ fontWeight: 600 }}>Tr√¨nh ƒë·ªô th·ªÉ thao</label>
              <div className={styles.skillLevelGrid}>
                {skillLevels.map((level) => (
                  <button
                    type="button"
                    key={level.value}
                    className={`${styles.skillLevelButton} ${sendformData.skillLevel === level.value ? styles.selected : ""
                      }`}
                    onClick={() =>
                      setFormData((prev) => ({ ...prev, skillLevel: level.value }))
                    }
                  >
                    {level.label}
                  </button>
                ))}
              </div>
            </div>


            {/* Description */}
            <div className={styles.formGroup}>
              <label
                htmlFor="clubDescription"
                className={styles.formLabel}
                style={{ fontWeight: 600 }}
              >
                Quy ƒê·ªãnh C√¢u L·∫°c B·ªô
              </label>
              <ReactQuill
                id="clubDescription"
                value={sendformData.description} // Li√™n k·∫øt gi√° tr·ªã t·ª´ formData
                onChange={(value) =>
                  setFormData((prev) => ({ ...prev, description: value }))
                } // C·∫≠p nh·∫≠t formData khi n·ªôi dung thay ƒë·ªïi
                placeholder="Nh·∫≠p quy ƒë·ªãnh c√¢u l·∫°c b·ªô..."
                style={{ height: "250px", paddingBottom: "50px" }}
                theme="snow"
              />
              {errors.description && (
                <p className={styles.errorText} style={{ color: "red" }}>
                  {errors.description}
                </p>
              )}
            </div>
            

            {/* Th√™m l∆∞u √Ω v·ªÅ ph√≠ t·∫°o c√¢u l·∫°c b·ªô */}
            <div className={styles.feeNotice}>
              <p style={{ color: 'red', fontWeight: 'bold', textAlign: 'center', marginBottom: '20px' }}>
                L∆∞u √Ω: Ph√≠ t·∫°o c√¢u l·∫°c b·ªô s·∫Ω l√† 200.000 ƒë·ªìng ( Gia h·∫°n th√°ng ti·∫øp theo s·∫Ω l√† 150.000 ƒë·ªìng.).
              </p>
            </div>

            {/* Submit Button */}
            <div className={styles.centerWrapper}>
              <button className={styles.createButton}>T·∫°o</button>
            </div>
          </form>
        </section>
      </main>
      <ToastContainer
        position="top-right"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
    </div>
  );
}

export default SportClubCreation;
